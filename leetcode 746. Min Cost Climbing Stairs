class Solution {
    public int minCostClimbingStairs(int[] cost) {
        for(int i=2; i < cost.length; i++){
            cost[i] += Math.min(cost[i-1], cost[i-2]);
        }
        return Math.min(cost[cost.length-1],cost[cost.length-2]);
    }
}
//  Runtime: 1 ms, faster than 72.06% of Java online submissions for Min Cost Climbing Stairs.
// Memory Usage: 38.5 MB, less than 89.43% of Java online submissions for Min Cost Climbing Stairs.

// second solution
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int step1 = 0;
        int step2 = 0;
        for(int i = 0; i <cost.length; i++){
            int correntStep =cost[i] + Math.min(step1,step2);
            step1 = step2;
            step2 = correntStep;
        }
        return Math.min(step1,step2);
    }
}
// Runtime: 1 ms, faster than 72.06% of Java online submissions for Min Cost Climbing Stairs.
// Memory Usage: 39 MB, less than 26.30% of Java online submissions for Min Cost Climbing Stairs.
