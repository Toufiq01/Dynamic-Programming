class Solution {
    public boolean isSubsequence(String s, String t) {
        int lengthS = s.length();
        int lengthT = t.length();
        char[] arrayS = s.toCharArray();
        char[] arrayT = t.toCharArray();
        int j=0;
        if(lengthS == 0) return true;
        for(int i = 0; j<lengthS && i<lengthT; i++){
            j+= (arrayS[j] == arrayT[i])?1:0;  
        }
        if(j == lengthS) return true;
        else return false;
    }
}
//Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence.
//Memory Usage: 36.8 MB, less than 84.41% of Java online submissions for Is Subsequence.

// or 
class Solution {
    public boolean isSubsequence(String s, String t) {
        int lengthS = s.length();
        int lengthT = t.length();
        int j=0;
        if(lengthS == 0) return true;
        for(int i = 0; j<lengthS && i<lengthT; i++){
            j+= (s.charAt(j) == t.charAt(i))?1:0;  
        }
        if(j == lengthS) return true;
        else return false;
    }
}
// Runtime: 1 ms, faster than 76.37% of Java online submissions for Is Subsequence.
// Memory Usage: 37 MB, less than 45.01% of Java online submissions for Is Subsequence.
